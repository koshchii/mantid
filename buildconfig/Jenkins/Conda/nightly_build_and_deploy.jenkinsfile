// This script expects the following environment variables to be set by the Jenkins job:
// GITHUB_USER_NAME - The name of the user, being used with pushing/pulling from conda-recipes
// GITHUB_USER_EMAIL - The email of the user, being used with pushing/pulling from conda-recipes
// GITHUB_TOKEN_CREDENTIAL_ID - The name of the credentials token in Jenkins that you want to use for cloning and pushing to the conda-recipes repo
// ANACONDA_TOKEN_CREDENTIAL_ID - The name of the credentials token in Jenkins that you want to use for publishing conda packages
// ANACONDA_CHANNEL - The channel to publish to on Anaconda.org
// ANACONDA_CHANNEL_LABEL - This will be used as the label for the channel, otherwise no label will be set.
// PACKAGE_OPTIONS - additional options to pass to the packaging step.

def build_and_test_unix(cmake_preset) {
  sh "${WORKSPACE}/buildconfig/Jenkins/Conda/conda-buildscript ${WORKSPACE} ${cmake_preset} --enable-systemtests --enable-doctests --clean-build --clean-external-projects"
}

def build_and_test_win(cmake_preset) {
  bat "\"${WIN_BASH}\" -ex -c \"${WORKSPACE_UNIX_PATH}/buildconfig/Jenkins/Conda/conda-buildscript ${WORKSPACE_UNIX_PATH} ${cmake_preset} --enable-systemtests --clean-build --clean-external-projects\""
}

def publish_test_reports() {
  xunit thresholds: [failed(failureThreshold: '0')],
  tools: [CTest(excludesPattern: '', pattern: 'build/Testing/**/*.xml', stopProcessingIfError: true)]
  junit "build/Testing/SystemTests/scripts/TEST-*.xml"
}

def conda_build_unix(arch) {
  sh "${WORKSPACE}/buildconfig/Jenkins/Conda/package ${WORKSPACE} --build-mantid --build-qt --build-workbench ${package_options()}"
  archive_conda_build(arch)
}

def conda_build_win(arch) {
  bat "\"${WIN_BASH}\" -ex -c \"${WORKSPACE_UNIX_PATH}/buildconfig/Jenkins/Conda/package ${WORKSPACE_UNIX_PATH} --build-mantid --build-qt --build-workbench ${package_options()}\""
  archive_conda_build(arch)
}

def package_options() {
  package_options="${PACKAGE_OPTIONS.trim()}"
  if(PACKAGE_SUFFIX.trim() != '') {
      package_options += " --package-suffix ${PACKAGE_SUFFIX}"
  }
  return package_options.trim()
}

def recipe_update_options() {
  recipe_options=""
  if(PACKAGE_SUFFIX.trim() == '') {
    recipe_options+=" --release-version"
  }
  return recipe_options
}

def archive_conda_build(arch) {
  archiveArtifacts artifacts: "**/conda-bld/${arch}/*.tar.bz2",
    allowEmptyArchive: false,
    fingerprint: true,
    onlyIfSuccessful: true
}

def create_standalone_package_linux() {
  archiveArtifacts artifacts: "*.tar.xz",
    allowEmptyArchive: false,
    fingerprint: true,
    onlyIfSuccessful: true
}

def create_standalone_package_osx() {
  archiveArtifacts artifacts: "*.dmg",
    allowEmptyArchive: false,
    fingerprint: true,
    onlyIfSuccessful: true
}

def create_standalone_package_win() {
  archiveArtifacts artifacts: "*.exe",
    allowEmptyArchive: false,
    fingerprint: true,
    onlyIfSuccessful: true
}

pipeline {
  agent none
  environment {
    WIN_BASH = "C:\\Program Files\\git\\bin\\bash.exe"
  }
  stages {
    stage('Build and test') {
      when {
        beforeAgent true
        environment name: 'BUILD_AND_TEST', value: 'true'
      }
      parallel {
        stage('platform: linux') {
          agent { label 'conda-build-linux' }
          options { timestamps () }
          steps {
            build_and_test_unix("linux-ci")
          }
          post {
            always {
              publish_test_reports()
            }
          }
        }
        stage('platform: windows') {
          agent { label 'conda-build-win' }
          options { timestamps () }
          steps {
            script { WORKSPACE_UNIX_PATH = "${WORKSPACE}".replaceAll("\\\\", "/") }
            build_and_test_win("win")
          }
          post {
            always {
              publish_test_reports()
            }
          }
        }
        stage('platform: macos') {
          agent { label 'conda-build-osx' }
          options { timestamps () }
          steps {
            build_and_test_unix("osx-ci")
          }
          post {
            always {
              publish_test_reports()
            }
          }
        }
      }
    }
    stage('Update conda-recipes repository') {
      when {
        beforeAgent true
        environment name: 'PUBLISH_PACKAGES', value: 'true'
      }
      agent { label 'conda-build-linux' }
      environment {
        GITHUB_TOKEN = credentials("${GITHUB_TOKEN_CREDENTIAL_ID}")
        RECIPE_UPDATE_OPTIONS = recipe_update_options()
      }
      steps {
        sh '${WORKSPACE}/buildconfig/Jenkins/Conda/update-conda-recipes.sh $GITHUB_TOKEN $GITHUB_USER_NAME $GITHUB_USER_EMAIL $RECIPE_UPDATE_OPTIONS'
      }
    }
    stage('Packaging') {
      parallel {
        stage('platform: linux-64') {
          when {
            beforeAgent true
            environment name: 'BUILD_PACKAGE_LINUX', value: 'true'
          }
          agent { label 'conda-build-linux' }
          options { timestamps () }
          steps {
            conda_build_unix("linux-64")
            create_standalone_package_linux()
          }
        }
        stage('platform: win-64') {
          when {
            beforeAgent true
            environment name: 'BUILD_PACKAGE_WIN', value: 'true'
          }
          agent { label 'conda-build-win' }
          options { timestamps () }
          steps {
            script {
              WORKSPACE_UNIX_PATH = "${WORKSPACE}".replaceAll("\\\\", "/")
            }
            conda_build_win("win-64")
            create_standalone_package_win()
          }
        }
        stage('platform: osx-64') {
          when {
            beforeAgent true
            environment name: 'BUILD_PACKAGE_OSX', value: 'true'
          }
          agent { label 'conda-build-osx' }
          options { timestamps () }
          steps {
            conda_build_unix("osx-64")
            create_standalone_package_osx()
          }
        }
      }
    }
    stage ('Publishing') {
      when {
        beforeAgent true
        environment name: 'PUBLISH_PACKAGES', value: 'true'
      }
      agent { label 'conda-build-linux' } // Use linux for simplicity with shell scripts
      options { timestamps () }
      environment {
        ANACONDA_TOKEN = credentials("${ANACONDA_TOKEN_CREDENTIAL_ID}")
        GITHUB_TOKEN = credentials("${GITHUB_TOKEN_CREDENTIAL_ID}")
      }
      steps {
        // Conda first
        sh 'rm -fr ${WORKSPACE}/conda-packages'
        copyArtifacts filter: '**/conda-bld/**/*.tar.bz2',
          fingerprintArtifacts: true,
          projectName: '${JOB_NAME}',
          selector: specific('${BUILD_NUMBER}'),
          target: 'conda-packages',
          flatten: true
        sh '${WORKSPACE}/buildconfig/Jenkins/Conda/publish-to-anaconda ${WORKSPACE} ${ANACONDA_TOKEN} ${ANACONDA_CHANNEL} ${ANACONDA_CHANNEL_LABEL} ${WORKSPACE}/conda-packages/*.tar.bz2'
        // Standalone packages next
        sh 'rm -fr ${WORKSPACE}/standalone-packages'
        copyArtifacts filter: '*.exe, *.dmg, *.tar.xz',
          fingerprintArtifacts: true,
          projectName: '${JOB_NAME}',
          selector: specific('${BUILD_NUMBER}'),
          target: 'standalone-packages',
          flatten: true
        sh '${WORKSPACE}/buildconfig/Jenkins/Conda/publish-to-github ${WORKSPACE} ${GITHUB_TOKEN} ${GITHUB_RELEASES_REPO} ${GITHUB_RELEASES_TAG} ${WORKSPACE}/standalone-packages/*'
      }
    }
    stage ('Delete old Conda nightly packages from Anaconda') {
      when {
        beforeAgent true
        environment name: 'PUBLISH_PACKAGES', value: 'true'
      }
      agent { label 'conda-build-linux' } // Use linux for simplicity with shell scripts
      options { timestamps () }
      environment { ANACONDA_TOKEN = credentials("${ANACONDA_TOKEN_CREDENTIAL_ID}") }
      steps {
        sh '${WORKSPACE}/buildconfig/Jenkins/Conda/delete-old-nightlies.sh ${WORKSPACE} $ANACONDA_TOKEN --channel mantid --package mantid --label nightly'
        sh '${WORKSPACE}/buildconfig/Jenkins/Conda/delete-old-nightlies.sh ${WORKSPACE} $ANACONDA_TOKEN --channel mantid --package mantidqt --label nightly'
        sh '${WORKSPACE}/buildconfig/Jenkins/Conda/delete-old-nightlies.sh ${WORKSPACE} $ANACONDA_TOKEN --channel mantid --package mantidworkbench --label nightly'
      }
    }
  }
}
